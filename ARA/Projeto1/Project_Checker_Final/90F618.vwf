/*<simulation_settings>
<ftestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off Project_Checker_Final -c Checker_CRC_8 --vector_source="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/90F618.vwf" --testbench_file="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/simulation/qsim/90F618.vwf.vht"</ftestbench_cmd>
<ttestbench_cmd>quartus_eda --gen_testbench --tool=modelsim_oem --format=vhdl --write_settings_files=off Project_Checker_Final -c Checker_CRC_8 --vector_source="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/90F618.vwf" --testbench_file="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/simulation/qsim/90F618.vwf.vht"</ttestbench_cmd>
<fnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=on --flatten_buses=off --tool=modelsim_oem --format=vhdl --output_directory="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/simulation/qsim/" Project_Checker_Final -c Checker_CRC_8</fnetlist_cmd>
<tnetlist_cmd>quartus_eda --write_settings_files=off --simulation --functional=off --flatten_buses=off --timescale=1ps --tool=modelsim_oem --format=vhdl --output_directory="C:/intelFPGA_lite/17.1/ACA/Project_Checker_Final/simulation/qsim/" Project_Checker_Final -c Checker_CRC_8</tnetlist_cmd>
<modelsim_script>onerror {exit -code 1}
vlib work
vcom -work work Checker_CRC_8.vho
vcom -work work 90F618.vwf.vht
vsim -novopt -c -t 1ps -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.Checker_CRC_8_vhd_vec_tst
vcd file -direction Project_Checker_Final.msim.vcd
vcd add -internal Checker_CRC_8_vhd_vec_tst/*
vcd add -internal Checker_CRC_8_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script>
<modelsim_script_timing>onerror {exit -code 1}
vlib work
vcom -work work Checker_CRC_8.vho
vcom -work work 90F618.vwf.vht
vsim -novopt -c -t 1ps -sdfmax Checker_CRC_8_vhd_vec_tst/i1=Checker_CRC_8_vhd.sdo -L cycloneive -L altera -L altera_mf -L 220model -L sgate -L altera_lnsim work.Checker_CRC_8_vhd_vec_tst
vcd file -direction Project_Checker_Final.msim.vcd
vcd add -internal Checker_CRC_8_vhd_vec_tst/*
vcd add -internal Checker_CRC_8_vhd_vec_tst/i1/*
proc simTimestamp {} {
    echo "Simulation time: $::now ps"
    if { [string equal running [runStatus]] } {
        after 2500 simTimestamp
    }
}
after 2500 simTimestamp
run -all
quit -f
</modelsim_script_timing>
<hdl_lang>vhdl</hdl_lang>
</simulation_settings>*/
/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clock")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("dataIn")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nRst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("error")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("clock")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 100;
			LEVEL 0 FOR 5.0;
			LEVEL 1 FOR 5.0;
		}
	}
}

TRANSITION_LIST("dataIn")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 13.379;
		LEVEL 1 FOR 2.418;
		LEVEL 0 FOR 27.404;
		LEVEL 1 FOR 3.063;
		LEVEL 0 FOR 47.07;
		LEVEL 1 FOR 33.208;
		LEVEL 0 FOR 16.603;
		LEVEL 1 FOR 14.186;
		LEVEL 0 FOR 44.975;
		LEVEL 1 FOR 14.185;
		LEVEL 0 FOR 67.543;
		LEVEL 1 FOR 2.418;
		LEVEL 0 FOR 26.759;
		LEVEL 1 FOR 5.159;
		LEVEL 0 FOR 14.346;
		LEVEL 1 FOR 5.804;
		LEVEL 0 FOR 20.956;
		LEVEL 1 FOR 43.685;
		LEVEL 0 FOR 6.125;
		LEVEL 1 FOR 16.926;
		LEVEL 0 FOR 46.91;
		LEVEL 1 FOR 13.863;
		LEVEL 0 FOR 513.015;
	}
}

TRANSITION_LIST("nRst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 8.06;
		LEVEL 1 FOR 260.982;
		LEVEL 0 FOR 12.896;
		LEVEL 1 FOR 264.53;
		LEVEL 0 FOR 453.532;
	}
}

TRANSITION_LIST("error")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clock";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dataIn";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nRst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "error";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
